# Structure is ALWAYS as follows:
# 1. General rule is place function definitions inside their own subgraphs.
# 2. Functional node begins from the node_name node.

# 3. Function definitions & calls look as follows:
# 1) Definitions:
# subgraph def_{node_name} {
#     {node_name} [
#         TYPES="[{type_name}, ...]" (multiple type variants can be choosen, none can be choosen)
#         MODS="[{mod_name}, ...]"
#         uses_wrapped_types="true" (whether to wrap types into the subgraph's type, if subgraph has an inner type)
#         ...
#     ]
#     EXIT_{node_name} [label="EXIT {node_label}"]
#     ...
# }
# 2) Calls (execution will move to a root of a different subgraph):
#     call{caller_num}_{node_name} [
#         TYPES="[{type_name}, ...]" OR "[any]" OR "[known]" OR "[compatible]" OR "[...]" (passes all argument types further),
#         MODS="[{mod_name}, ...]" OR "[...]" (passes all argument modifiers further),
#         ...
#     ]
#
# TYPE, TYPES and MOD in definitions are only for type-checking.
# All specified types of modifiers (TYPE, TYPES, MOD) are required to be passed by caller.
# If TYPES="[any]", all types are selected.
# If TYPES="[compatible]" or TYPES="[known]", the types are popped from the reprective stacks.
# from the respective stacks

# 4. Typed node (with a question mark at the end in definition label):
# {node_name} [TYPE_NAME="type_name"]
# TYPE_NAME is the name of a type listed in function declaration.
# The node will be turned off or on respective to the types passed to function call.

# 4.1 A node with a modifier
# {node_name} [modifier="[trig_name]", modifier_mode="on"/"off"]
# if `modifier` is present in the modifiers, turn the node on or off according to the modifier_mode.

# 4.2 A node with a call modifier
# {node_name} [call_modifier="[call_trig_name]"]
# if the function corresponding to call_trig_name returns true (handler registered in code),
# the node is on. Otherwise, it is off.

# 5. Exit a callable node:
# EXIT_{node_name} [label="EXIT {node_label}"]

# 6. Call a callable node with params:
# call{caller_num}_{node_name} [TYPES={...}, MODS={...}, ...]
# ... -> call...
# there can be multiple callers, so each caller should have a unique id
# values of TYPES and MOD are exact mathes to those in definition

# 7. Call a callable node without params:
# call{caller_num}_{node_name} [...]
# ... -> call...

# 8. These are ignored:
# 1) ... -> ... [color=none]
# 2) Graphviz params in [] (label, shape...)

# 9. Define a node before referencing it:
# FROM []
# Query -> FROM

# 10. Don't do this:
# ... -> ... -> ...

# 11. subgraph ignore {} is completely ignored

# 12. Do NOT use block comments /* */

# 13 [temporary]. Mark nodes that will generate a literal value with 100%
# probability as node[literal="t"]

# 14. To use modifiers provided in arguments, mark a node with modifier="MOD. NAME", modifier_mode="off" / modifier_mode="on"

digraph G {
    subgraph def_Query {
        Query [TYPES="[numeric, integer, bigint, 3VL Value, text, date]", MODS="[single column, single row]", label="Query\ntypes=[numeric, integer, bigint, 3VL Value, text, date]\nmods=[single column, single row]", shape=octagon, style=filled, color=green]
        EXIT_Query [label="EXIT Query"]

        call0_FROM [label="FROM", shape=rectangle, color=cornflowerblue, style=filled]
        Query -> call0_FROM

        call0_WHERE [label="WHERE", shape=rectangle, style=filled, color=darkgoldenrod1]
        call0_FROM -> call0_WHERE

        call0_SELECT [label="SELECT\nTYPES: [...types]\nMODS: [?single column]", TYPES="[...]", MODS="[?single column]", shape=rectangle, style=filled, color=bisque]
        call0_WHERE -> call0_SELECT
        call0_FROM -> call0_SELECT
        
        call0_GROUP_BY [label="GROUP BY", shape=rectangle, style=filled, color=gray]
        call0_WHERE -> call0_GROUP_BY
        call0_FROM -> call0_GROUP_BY
        call0_GROUP_BY -> call0_SELECT

        call0_HAVING [label="HAVING", shape=rectangle, style=filled, color=mediumvioletred]
        call0_GROUP_BY -> call0_HAVING
        call0_HAVING -> call0_SELECT

        call0_ORDER_BY [label="ORDER BY", shape=rectangle, style=filled, color=deepskyblue]
        call0_SELECT -> call0_ORDER_BY

        call0_LIMIT [label="LIMIT\nMODS: [?single row]", MODS="[?single row]", shape=rectangle, style=filled, color=brown]
        call0_ORDER_BY -> call0_LIMIT
        call0_LIMIT -> EXIT_Query
    }

    subgraph def_FROM {
        FROM [shape=rectangle, color=cornflowerblue, style=filled]
        EXIT_FROM [label="EXIT FROM", shape=rectangle]

        // FROM -> EXIT_FROM

        FROM_table [label="Table"]
        FROM -> FROM_table
        call0_Query [label="Query", shape=rectangle, TYPES="[any]", MODS="[]", style=filled, color=green]
        FROM -> call0_Query

        FROM_join_by [label="join by"]
        call0_Query -> FROM_join_by
        FROM_table -> FROM_join_by

        FROM_join_to [label="join to"]

        FROM_join_join [label="JOIN"]
        FROM_join_by -> FROM_join_join
        FROM_join_join -> FROM_join_to
        FROM_left_join [label="LEFT JOIN"]
        FROM_join_by -> FROM_left_join
        FROM_left_join -> FROM_join_to
        FROM_right_join [label="RIGHT JOIN"]
        FROM_join_by -> FROM_right_join
        FROM_right_join -> FROM_join_to
        // Reason for turning off: FULL JOIN is only supported with merge-joinable or hash-joinable join conditions
        // To turn this on, you have to provide 'no subquery' and possibly other mods to 'on' in case of full outer join
        // FROM_full_join [label="FULL JOIN"]
        // FROM_join_by -> FROM_full_join
        // FROM_full_join -> FROM_join_to

        FROM_join_on [label="ON"]
        FROM_join_table [label="Table"]
        FROM_join_to -> FROM_join_table
        FROM_join_table -> FROM_join_on
        call5_Query [label="Query", shape=rectangle, TYPES="[any]", MODS="[]", style=filled, color=green]
        FROM_join_to -> call5_Query
        call5_Query -> FROM_join_on

        call83_types [TYPES="[3VL Value]", MODS="[no aggregate]", label="TYPES: 3VL Value\nMODS: [no aggregate]", shape=rectangle, style=filled, color=lightblue]
        FROM_join_on -> call83_types
        call83_types -> FROM_join_by

        FROM_cartesian_product [label="Cartesian product"]
        FROM_cartesian_product -> EXIT_FROM
        FROM_table -> FROM_cartesian_product
        // FROM_cartesian_product -> FROM_table
        call0_Query -> FROM_cartesian_product
        // FROM_cartesian_product -> call0_Query
        call83_types -> FROM_cartesian_product
    }

    subgraph def_WHERE {
        WHERE [label="WHERE", shape=rectangle, style=filled, color=darkgoldenrod1]
        EXIT_WHERE [label="EXIT WHERE", shape=rectangle]

        call53_types [TYPES="[3VL Value]", MODS="[no aggregate]", label="TYPES: 3VL Value\nMODS: [no aggregate]", shape=rectangle, style=filled, color=lightblue]
        WHERE -> call53_types
        call53_types -> EXIT_WHERE
    }

    subgraph def_SELECT {
        SELECT [TYPES="[numeric, integer, bigint, 3VL Value, text, date]", MODS="[single column]", label="SELECT\ntypes=[numeric, integer, bigint, 3VL Value, text, date]\nmods=[single column]", shape=rectangle, style=filled, color=bisque]
        EXIT_SELECT [label="EXIT SELECT", shape=rectangle]

        SELECT_DISTINCT [label="DISTINCT"]
        SELECT -> SELECT_DISTINCT

        SELECT_list [label="SELECT list\nset value: 'grouping_enabled'", set_value="grouping_enabled"]
        SELECT_DISTINCT -> SELECT_list
        SELECT -> SELECT_list
        SELECT_list_multiple_values [label="Multiple values\nmod.: 'single column' -> OFF", modifier="single column", modifier_mode="off"]
        SELECT_list_multiple_values -> SELECT_list

        SELECT_unnamed_expr [label="Unnamed"]
        SELECT_expr_with_alias [label="With alias"]
        SELECT_list -> SELECT_unnamed_expr
        SELECT_list -> SELECT_expr_with_alias

        select_expr [label="Expression"]
        SELECT_unnamed_expr -> select_expr
        SELECT_expr_with_alias -> select_expr
        select_expr_done [label="Expression done"]
        select_expr_done -> SELECT_list_multiple_values
        select_expr_done -> EXIT_SELECT
        call73_types [label="TYPES: [...types]\nMODS: [group by columns]\ncall mod.: 'grouping mode switch'", TYPES="[...]", MODS="[group by columns]", call_modifier="grouping mode switch", shape=rectangle, style=filled, color=lightblue]
        select_expr -> call73_types
        call73_types -> select_expr_done
        call54_types [label="TYPES: [...types]\nMODS: [no aggregate]\ncall mod.: 'grouping mode switch'", TYPES="[...]", MODS="[no aggregate]", call_modifier="grouping mode switch", shape=rectangle, style=filled, color=lightblue]
        select_expr -> call54_types
        call54_types -> select_expr_done

        // we can make a call trigger, moving this to a separate subgraph,
        // that would check whether there is a single column for a wildcard,
        // but let's keep it simple for now
        // SELECT_tables_eligible_for_wildcard [label="Set Relations for wildcards\nset_value='wildcard_relations'", set_value="wildcard_relations"]
        // SELECT_list -> SELECT_tables_eligible_for_wildcard
        // SELECT_wildcard [label="wildcard\ncall mod.: is_wildcard_available", call_modifier="is_wildcard_available"]
        // SELECT_qualified_wildcard [label="qualified wildcard\ncall mod.: is_wildcard_available", call_modifier="is_wildcard_available"]
        // SELECT_tables_eligible_for_wildcard -> SELECT_wildcard
        // SELECT_tables_eligible_for_wildcard -> SELECT_qualified_wildcard
        // SELECT_wildcard -> SELECT_list_multiple_values
        // SELECT_wildcard -> EXIT_SELECT
        // SELECT_qualified_wildcard -> SELECT_list_multiple_values
        // SELECT_qualified_wildcard -> EXIT_SELECT
    }

    subgraph def_ORDER_BY {
        ORDER_BY [label="ORDER BY", shape=rectangle, style=filled, color=deepskyblue]
        EXIT_ORDER_BY [label="EXIT ORDER BY", shape=rectangle]

        ORDER_BY -> EXIT_ORDER_BY

        // order by basically functions like SELECT w/o aliases
        // but no literals are allowed, and you also can
        // reference SELECT by aliases/numbers, and the priority
        // is on the SELECT, when ambiguous between select and from.

        order_by_list [label="ORDER BY list\nset value: 'grouping_enabled'", set_value="grouping_enabled"]
        ORDER_BY -> order_by_list
        order_by_expr_done [label="Expression done"]

        // сall mod here to ccheck whether aliased columns exist
        // order_by_select_reference [label="SELECT reference"]
        // order_by_list -> order_by_select_reference
        // order_by_select_reference_by_alias [label="by alias"]
        // order_by_select_reference -> order_by_select_reference_by_alias
        // order_by_select_reference_by_alias -> order_by_expr_done

        order_by_expr [label="Expression"]
        order_by_list -> order_by_expr

        call84_types [label="TYPES: any\nMODS: [group by columns, no literals]\ncall mod.: 'grouping mode switch'", TYPES="[any]", MODS="[group by columns, no literals]", call_modifier="grouping mode switch", shape=rectangle, style=filled, color=lightblue]
        order_by_expr -> call84_types
        call84_types -> order_by_expr_done
        call85_types [label="TYPES: any\nMODS: [no aggregate, no literals]\ncall mod.: 'grouping mode switch'", TYPES="[any]", MODS="[no aggregate, no literals]", call_modifier="grouping mode switch", shape=rectangle, style=filled, color=lightblue]
        order_by_expr -> call85_types
        call85_types -> order_by_expr_done

        order_by_order_selected [label="order selected"]
        order_by_expr_done -> order_by_order_selected
        order_by_asc [label="asc"]
        order_by_expr_done -> order_by_asc
        order_by_asc -> order_by_order_selected
        order_by_desc [label="desc"]
        order_by_expr_done -> order_by_desc
        order_by_desc -> order_by_order_selected

        order_by_nulls_first_selected [label="nulls order selected"]
        order_by_order_selected -> order_by_nulls_first_selected
        order_by_nulls_first_selected -> order_by_list
        order_by_nulls_first_selected -> EXIT_ORDER_BY
        order_by_nulls_first [label="NULLS FIRST"]
        order_by_order_selected -> order_by_nulls_first
        order_by_nulls_first -> order_by_nulls_first_selected
        order_by_nulls_last [label="NULLS LAST"]
        order_by_order_selected -> order_by_nulls_last
        order_by_nulls_last -> order_by_nulls_first_selected
    }

    subgraph def_LIMIT {
        LIMIT [MODS="[single row]", label="LIMIT\nmods=[single row]", shape=rectangle, style=filled, color=brown]
        EXIT_LIMIT [label="EXIT LIMIT", shape=rectangle]

        query_can_skip_limit_set_val [label="Can skip LIMIT?\n[set value]", set_value="can_skip_limit"]
        LIMIT -> query_can_skip_limit_set_val
        query_can_skip_limit [label="Skip LIMIT\n[call mod]", call_modifier="can_skip_limit_mod"]
        query_can_skip_limit_set_val-> query_can_skip_limit
        query_can_skip_limit -> EXIT_LIMIT

        single_row_true [label="limit 1\nmod: 'single row' -> ON", modifier="single row", modifier_mode="on"]
        LIMIT -> single_row_true
        single_row_true -> EXIT_LIMIT

        // limit_num [label="limit [num]\nmod: 'single row' -> OFF", modifier="single row", modifier_mode="off"]
        // LIMIT -> limit_num
        // call52_types [TYPES="[integer, numeric, bigint]", MODS="[no column spec, no aggregate]", label="TYPES: [integer, numeric, bigint]\nMODS: [no column spec, no aggregate]", shape=rectangle, style=filled, color=lightblue]
        // limit_num -> call52_types
        // call52_types -> EXIT_LIMIT
    }

    subgraph def_VAL_3 {
        VAL_3 [shape=rectangle, label="3VL Value\n[mods]", MODS="[]", style=filled, color=red]
        EXIT_VAL_3 [shape=rectangle, label="EXIT 3VL Value"]

        IsNull [label="IS NULL"]
        call55_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY\nMODS: [...mods]", shape=rectangle, color=lightblue, style=filled]
        VAL_3 -> IsNull
        IsNull -> call55_types
        IsNull_not [label="NOT"]
        IsNull -> IsNull_not
        IsNull_not -> call55_types
        call55_types -> EXIT_VAL_3

        IsDistinctFrom [label="IS DISTINCT FROM"]
        call56_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY\nMODS: [...mods]", shape=rectangle, color=lightblue, style=filled]
        IsDistinctNOT [label="NOT"]
        DISTINCT []
        call21_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        VAL_3 -> IsDistinctFrom
        IsDistinctFrom -> call56_types
        call56_types -> IsDistinctNOT
        IsDistinctNOT -> DISTINCT
        call56_types -> DISTINCT
        DISTINCT -> call21_types
        call21_types -> EXIT_VAL_3

        Exists_not [label="NOT"]
        Exists [label="EXISTS"]
        call2_Query [TYPES="[any]", MODS="[]", label="Query\nTYPES: ANY", shape=rectangle, style=filled, color=green]
        VAL_3 -> Exists
        Exists -> call2_Query
        call2_Query -> EXIT_VAL_3
        Exists -> Exists_not
        Exists_not -> call2_Query

        InList[label="IN [list expr]"]
        InListNot [label="NOT"]
        InListIn [label="IN"]
        VAL_3 -> InList
        call57_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY\nMODS: [...mods]", shape=rectangle, color=lightblue, style=filled]
        InList -> call57_types
        call57_types -> InListNot
        InListNot -> InListIn
        call57_types -> InListIn
        call1_list_expr [TYPES="[compatible]", MODS="[...]", label="list expr\nTYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=blue]
        InListIn -> call1_list_expr
        call1_list_expr -> EXIT_VAL_3

        InSubquery[label="IN [subquery]"]
        InSubqueryNot [label="NOT"]
        InSubqueryIn [label="IN"]
        call58_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY\nMODS: [...mods]", shape=rectangle, color=lightblue, style=filled]
        VAL_3 -> InSubquery
        InSubquery -> call58_types
        call58_types -> InSubqueryNot
        InSubqueryNot -> InSubqueryIn
        call58_types -> InSubqueryIn
        call3_Query [TYPES="[compatible]", MODS="[single column]", label="Query\nTYPE: [compatible]\nMODS: [single column]", shape=rectangle, style=filled, color=green]
        InSubqueryIn -> call3_Query
        call3_Query -> EXIT_VAL_3

        Between[label="BETWEEN . AND ."]
        BetweenBetween [label="BETWEEN"]
        BetweenBetweenAnd [label="AND"]
        VAL_3 -> Between
        call59_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY\nMODS: [...mods]", shape=rectangle, color=lightblue, style=filled]
        Between -> call59_types
        call59_types -> BetweenBetween
        call22_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BetweenBetween -> call22_types
        call22_types -> BetweenBetweenAnd
        call23_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BetweenBetweenAnd -> call23_types
        call23_types -> EXIT_VAL_3

        BinaryComp[label="CMP"]
        BinaryCompLess [label="<"]
        BinaryCompEqual [label="="]
        BinaryCompLessEqual [label="<="]
        BinaryCompUnEqual [label="<>"]
        VAL_3 -> BinaryComp
        call60_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY\nMODS: [...mods]", shape=rectangle, color=lightblue, style=filled]
        BinaryComp -> call60_types
        call24_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        call60_types -> BinaryCompLess
        BinaryCompLess -> call24_types
        call60_types -> BinaryCompEqual
        BinaryCompEqual -> call24_types
        call60_types -> BinaryCompLessEqual
        BinaryCompLessEqual -> call24_types
        call60_types -> BinaryCompUnEqual
        BinaryCompUnEqual -> call24_types
        call24_types -> EXIT_VAL_3

        AnyAll[label="ANY / ALL"]
        AnyAllSelectOp[label="select op."]
        AnyAllLess [label="<"]
        AnyAllEqual [label="="]
        AnyAllLessEqual [label="<="]
        AnyAllUnEqual [label="<>"]
        AnyAllSelectIter[label="select iterable"]
        AnyAllAnyAll[label="select ANY/ALL"]
        AnyAllAnyAllAny[label="ANY"]
        AnyAllAnyAllAll[label="ALL"]
        VAL_3 -> AnyAll
        call61_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY\nMODS: [...mods]", shape=rectangle, color=lightblue, style=filled]
        AnyAll -> call61_types
        call61_types -> AnyAllSelectOp
        AnyAllSelectOp -> AnyAllLess
        AnyAllLess -> AnyAllSelectIter
        AnyAllSelectOp -> AnyAllEqual
        AnyAllEqual -> AnyAllSelectIter
        AnyAllSelectOp -> AnyAllLessEqual
        AnyAllLessEqual -> AnyAllSelectIter
        AnyAllSelectOp -> AnyAllUnEqual
        AnyAllUnEqual -> AnyAllSelectIter
        call4_Query [TYPES="[compatible]", MODS="[single column]", label="Query\nTYPE: [compatible]\nMODS: [single column]", shape=rectangle, style=filled, color=green]
        AnyAllSelectIter -> call4_Query
        call4_Query -> AnyAllAnyAll
        AnyAllAnyAll -> AnyAllAnyAllAny
        AnyAllAnyAllAny -> EXIT_VAL_3
        AnyAllAnyAll -> AnyAllAnyAllAll
        AnyAllAnyAllAll -> EXIT_VAL_3

        BinaryStringLike[label="LIKE"]
        BinaryStringLikeNot [label="NOT"]
        BinaryStringLikeIn [label="LIKE"]
        VAL_3 -> BinaryStringLike
        call25_types [MODS="[...]", TYPES="[text]", label="TYPES: text\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryStringLike -> call25_types
        call25_types -> BinaryStringLikeNot
        BinaryStringLikeNot -> BinaryStringLikeIn
        call25_types -> BinaryStringLikeIn
        call26_types [MODS="[...]", TYPES="[text]", label="TYPES: text\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryStringLikeIn -> call26_types
        call26_types -> EXIT_VAL_3

        BinaryBooleanOpV3[label="bool op."]
        BinaryBooleanOpV3AND [label="AND"]
        BinaryBooleanOpV3OR [label="OR"]
        // BinaryBooleanOpV3XOR [label="XOR"] // THERE IS NO XOR IN POSTGRESQL
        VAL_3 -> BinaryBooleanOpV3
        call27_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryBooleanOpV3 -> call27_types
        call27_types -> BinaryBooleanOpV3AND
        call28_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryBooleanOpV3AND -> call28_types
        call27_types -> BinaryBooleanOpV3OR
        BinaryBooleanOpV3OR -> call28_types
        // call27_types -> BinaryBooleanOpV3XOR
        // BinaryBooleanOpV3XOR -> call28_types
        call28_types -> EXIT_VAL_3

        Nested_VAL_3[label="([expr])"]
        VAL_3 -> Nested_VAL_3
        call29_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        Nested_VAL_3 -> call29_types
        call29_types -> EXIT_VAL_3

        UnaryNot_VAL_3[label="NOT"]
        call30_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        VAL_3 -> UnaryNot_VAL_3
        UnaryNot_VAL_3 -> call30_types
        call30_types -> EXIT_VAL_3
    }

    subgraph def_number {
        number [shape=rectangle, label="number\ntypes=[integer, numeric, bigint]\n[mods]", TYPES="[integer, numeric, bigint]", MODS="[]", style=filled, color=chocolate]
        EXIT_number [label="EXIT number"]

        BinaryNumberOp[label="binary op."]
        call47_types [TYPES="[...]", MODS="[...]", label="TYPES: [...types]\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        number -> BinaryNumberOp
        call48_types [TYPES="[...]", MODS="[...]", label="TYPES: [...types]\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryNumberOp -> call48_types
        binary_number_plus [label="+"]
        call48_types -> binary_number_plus
        binary_number_plus -> call47_types
        binary_number_minus [label="-"]
        call48_types -> binary_number_minus
        binary_number_minus -> call47_types
        binary_number_mul [label="*"]
        call48_types -> binary_number_mul
        binary_number_mul -> call47_types
        binary_number_div [label="/"]
        call48_types -> binary_number_div
        binary_number_div -> call47_types
        binary_number_bin_or [label="|\ntn(i, bi)", TYPE_NAME="[integer, bigint]"]
        call48_types -> binary_number_bin_or
        binary_number_bin_or -> call47_types
        binary_number_bin_and [label="&\ntn(i, bi)", TYPE_NAME="[integer, bigint]"]
        call48_types -> binary_number_bin_and
        binary_number_bin_and -> call47_types
        binary_number_bin_xor [label="#\ntn(i, bi)", TYPE_NAME="[integer, bigint]"]
        call48_types -> binary_number_bin_xor
        binary_number_bin_xor -> call47_types
        binary_number_exp [label="^\ntn(num)", TYPE_NAME="numeric"]
        call48_types -> binary_number_exp
        binary_number_exp -> call47_types
        call47_types -> EXIT_number

        UnaryNumberOp [label="unary op."]
        call1_types [TYPES="[...]", MODS="[...]", label="TYPES: [...types]\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        number -> UnaryNumberOp
        unary_number_plus[label="+"]
        UnaryNumberOp -> unary_number_plus
        unary_number_plus -> call1_types
        unary_number_minus[label="-"]
        UnaryNumberOp -> unary_number_minus
        unary_number_minus -> call1_types
        unary_number_abs [label="@"]
        UnaryNumberOp -> unary_number_abs
        unary_number_abs -> call1_types
        unary_number_bin_not [label="~\ntn(i, bi)", TYPE_NAME="[integer, bigint]"]
        UnaryNumberOp -> unary_number_bin_not
        unary_number_bin_not -> call1_types
        // unary_number_sq_root [label="|/\ntn(num)", TYPE_NAME="numeric"]
        // UnaryNumberOp -> unary_number_sq_root
        // unary_number_sq_root -> call1_types
        unary_number_cub_root [label="||/\ntn(num)", TYPE_NAME="numeric"]
        UnaryNumberOp -> unary_number_cub_root
        unary_number_cub_root -> call1_types
        call1_types -> EXIT_number

        number_string_position[label="POSITION([expr] in [expr])\nTYPE_NAME=integer?", TYPE_NAME="integer"]
        number -> number_string_position
        call2_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        number_string_position -> call2_types
        string_position_in [label="in"]
        call2_types -> string_position_in
        call3_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        string_position_in -> call3_types
        call3_types -> EXIT_number

        nested_number[label="([expr])"]
        number -> nested_number
        call4_types [TYPES="[...]", MODS="[...]", label="TYPES: [...types]\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        nested_number -> call4_types
        call4_types -> EXIT_number
    }

    subgraph def_text {
        text [label="text\n[mods]", MODS="[]", shape=rectangle, style=filled, color=pink]
        EXIT_text [label="EXIT text"]

        text_nested [label="(text)", literal="t"]
        text -> text_nested
        call62_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_nested -> call62_types
        call62_types -> EXIT_text

        text_trim[label="TRIM"]
        text -> text_trim
        call5_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_trim -> call5_types
        call6_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_trim -> call6_types
        BOTH []
        call6_types -> BOTH
        BOTH -> call5_types
        LEADING []
        call6_types -> LEADING
        LEADING -> call5_types
        TRAILING []
        call6_types -> TRAILING
        TRAILING -> call5_types
        call5_types -> EXIT_text

        text_concat [label="concatenation"]
        text -> text_concat
        call7_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_concat -> call7_types
        text_concat_concat [label="||"]
        call7_types -> text_concat_concat
        call8_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_concat_concat -> call8_types
        call8_types -> EXIT_text

        text_substring[label="substring"]
        text -> text_substring
        call9_types [TYPES="[text]", MODS="[...]", label="TYPES: text\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_substring -> call9_types
        text_substring_from [label="from"]
        text_substring_for [label="for"]
        call9_types -> text_substring_from
        call9_types -> text_substring_for
        text_substring_end [label="finish"]
        call10_types [TYPES="[integer]", MODS="[...]", label="TYPES: [integer]\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_substring_from -> call10_types
        call10_types -> text_substring_for
        call10_types -> text_substring_end
        call11_types [TYPES="[integer]", MODS="[...]", label="TYPES: [integer]\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        text_substring_for -> call11_types
        call11_types -> text_substring_end
        text_substring_end -> EXIT_text
    }

    subgraph def_date {
        date [label="date\n[mods]", MODS="[]", shape=rectangle, style=filled, color=cadetblue4]
        EXIT_date [label="EXIT date"]

        date_nested [label="(date)"]
        date -> date_nested
        call86_types [TYPES="[date]", MODS="[...]", label="TYPES: date\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        date_nested -> call86_types
        call86_types -> EXIT_date
    }

    subgraph def_types {
        types [TYPES="[numeric, integer, bigint, 3VL Value, text, date]", MODS="[no literals, no case, no type expr, no typed nulls, no column spec, no subquery, group by columns, enable untyped null, no aggregate]", label="TYPE(S) (generic):\ntypes=[numeric, integer, bigint, 3VL Value, text, date]\nmods=[no literals, no case, no type expr, no typed nulls, no column spec, no subquery, group by columns, enable untyped null]", shape=octagon, style=filled, color=lightblue]
        EXIT_types [label="EXIT GENERIC TYPE(S)", shape=rectangle]

        types_select_type_bigint[TYPE_NAME="bigint", label="bigint?", set_value="types_type"]
        types -> types_select_type_bigint
        types_select_type_integer[TYPE_NAME="integer", label="integer?", set_value="types_type"]
        types -> types_select_type_integer
        types_select_type_numeric[TYPE_NAME="numeric", label="numeric?", set_value="types_type"]
        types -> types_select_type_numeric
        types_select_type_3vl[TYPE_NAME="3VL Value", label="3VL Value?", set_value="types_type"]
        types -> types_select_type_3vl
        types_select_type_text[TYPE_NAME="text", label="text?", set_value="types_type"]
        types -> types_select_type_text
        types_select_type_date[TYPE_NAME="date", label="date?", set_value="types_type"]
        types -> types_select_type_date

        types_null [label="Untyped null\nmod.: 'enable untyped null' -> ON", modifier="enable untyped null", modifier_mode="on"]
        types -> types_null
        types_null -> EXIT_types

        // types_return_typed_null [label="Typed null\nmod.: 'no typed nulls' -> OFF", modifier="no typed nulls", modifier_mode="off"]
        // types_select_type_bigint -> types_return_typed_null
        // types_select_type_integer -> types_return_typed_null
        // types_select_type_numeric -> types_return_typed_null
        // types_select_type_3vl -> types_return_typed_null
        // types_select_type_text -> types_return_typed_null
        // types_select_type_date -> types_return_typed_null
        // types_return_typed_null -> EXIT_types

        types_select_special_expression [label="select special expression"]
        types_select_type_bigint -> types_select_special_expression
        types_select_type_integer -> types_select_special_expression
        types_select_type_numeric -> types_select_special_expression
        types_select_type_3vl -> types_select_special_expression
        types_select_type_text -> types_select_special_expression
        types_select_type_date -> types_select_special_expression

        call0_column_spec [TYPES="[known]", MODS="[?group by columns]", modifier="no column spec", modifier_mode="off", call_modifier="is_column_type_available", label="column specifier\nTYPE: known\nMODS: [?group by columns]\nmod.: 'no column spec' -> OFF\ncall.mod.: 'is_column_type_available'", shape=rectangle, style=filled, color=gold]
        types_select_special_expression -> call0_column_spec
        call0_column_spec -> EXIT_types

        call1_Query [TYPES="[known]", MODS="[single row, single column]", label="Query\nMODS: [single row, single column]\nTYPE: known\nmod.: 'no subquery' -> OFF", modifier="no subquery", modifier_mode="off", shape=rectangle, style=filled, color=green]
        types_select_special_expression -> call1_Query
        call1_Query -> EXIT_types

        call0_aggregate_function [TYPES="[known]", modifier="no aggregate", modifier_mode="off", label="Aggregate function\nTYPE: known\nmod.: 'no aggregate' -> OFF", shape=rectangle, style=filled, color=peru]
        types_select_special_expression -> call0_aggregate_function
        call0_aggregate_function -> EXIT_types

        // cancel 'no literals' here
        // and also... well cancel if for types calls in all 
        // type expression subgraphs.
        // the problem is that in that way
        // too much new code is introduced into the type expression subgraphs.
        // we can solve this by introducing a separate subgraph just for literals
        // so basically cancellig would be needed, but only here.
        // added benefit of potentially more literals
        // but have to rewrite everything else
        call0_case [TYPES="[known]", MODS="[..., -no literals]", modifier="no case", modifier_mode="off", label="CASE\nTYPE: known\nMODS: [..., -no literals]\nmod.: 'no case' -> OFF", shape=rectangle, style=filled, color=aquamarine]
        types_select_special_expression -> call0_case
        call0_case -> EXIT_types

        call0_literals [TYPES="[known]", modifier="no literals", modifier_mode="off", label="Literals\nTYPE: known\nmod.: 'no literals' -> OFF", shape=rectangle, style=filled, color=hotpink]
        types_select_special_expression -> call0_literals
        call0_literals -> EXIT_types

        call2_number [label="number\nTYPES: [bigint]\nMODS: [..., -no literals]\nmod.: 'no type expr' -> OFF", TYPES="[bigint]", MODS="[..., -no literals]", modifier="no type expr", modifier_mode="off", shape=rectangle, style=filled, color=chocolate]
        types_select_type_bigint -> call2_number
        call2_number -> EXIT_types

        call1_number [label="number\nTYPES: [integer]\nMODS: [..., -no literals]\nmod.: 'no type expr' -> OFF", TYPES="[integer]", MODS="[..., -no literals]", modifier="no type expr", modifier_mode="off", shape=rectangle, style=filled, color=chocolate]
        types_select_type_integer -> call1_number
        call1_number -> EXIT_types

        call0_number [label="number\nTYPES: [numeric]\nMODS: [..., -no literals]\nmod.: 'no type expr' -> OFF", TYPES="[numeric]", MODS="[..., -no literals]", modifier="no type expr", modifier_mode="off", shape=rectangle, style=filled, color=chocolate]
        types_select_type_numeric -> call0_number
        call0_number -> EXIT_types

        call1_VAL_3 [label="3VL Value\nMODS: [..., -no literals]\nmod.: 'no type expr' -> OFF", MODS="[..., -no literals]", modifier="no type expr", modifier_mode="off", shape=rectangle, style=filled, color=red]
        types_select_type_3vl -> call1_VAL_3
        call1_VAL_3 -> EXIT_types

        call0_text [label="text\nMODS: [..., -no literals]\nmod.: 'no type expr' -> OFF", MODS="[..., -no literals]", modifier="no type expr", modifier_mode="off", shape=rectangle, style=filled, color=pink]
        types_select_type_text -> call0_text
        call0_text -> EXIT_types

        call0_date [label="date\nMODS: [..., -no literals]\nmod.: 'no type expr' -> OFF", MODS="[..., -no literals]", modifier="no type expr", modifier_mode="off", shape=rectangle, style=filled, color=cadetblue4]
        types_select_type_date -> call0_date
        call0_date -> EXIT_types
    }

    subgraph def_literals {
        literals [label="Literals\ntypes=[numeric, integer, bigint, 3VL Value, text, date]", TYPES="[numeric, integer, bigint, 3VL Value, text, date]", shape=rectangle, style=filled, color=hotpink]
        EXIT_literals [label="EXIT Literals", shape=rectangle]

        bool_literal [label="boolean literal\ntn(bool)", TYPE_NAME="3VL Value"]
        literals -> bool_literal
        true []
        bool_literal -> true
        true -> EXIT_literals
        false []
        bool_literal -> false
        false -> EXIT_literals

        number_literal_integer[label="random integer\ntn(i)", TYPE_NAME="integer"]
        literals -> number_literal_integer
        number_literal_integer -> EXIT_literals
        number_literal_numeric[label="random numeric\ntn(num)", TYPE_NAME="numeric"]
        literals -> number_literal_numeric
        number_literal_numeric -> EXIT_literals
        number_literal_bigint[label="random bigint\ntn(bi)", TYPE_NAME="bigint"]
        literals -> number_literal_bigint
        number_literal_bigint -> EXIT_literals

        text_literal [label="random text literal\ntn(text)", TYPE_NAME="text"]
        literals -> text_literal
        text_literal -> EXIT_literals

        date_literal [label="DATE literal\ntn(date)", TYPE_NAME="date"]
        literals -> date_literal
        date_literal -> EXIT_literals
    }

    subgraph def_case {
        case [TYPES="[numeric, integer, bigint, 3VL Value, text, date]", MODS="[]", label="CASE\ntypes=[numeric, integer, bigint, 3VL Value, text, date]\n[mods]", shape=rectangle, style=filled, color=aquamarine]
        EXIT_case [label="EXIT case", shape=rectangle]

        case_first_result [label="First result"]
        case -> case_first_result
        call82_types [TYPES="[...]", label="TYPES: [...types] -> TP1\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        case_first_result -> call82_types
        
        case_else [label="ELSE"]
        call81_types [TYPES="[compatible]", label="TYPES: [compatible(TP1)]\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        case_else -> call81_types
        call81_types -> EXIT_case
        case_else -> EXIT_case

        simple_case [label="Simple CASE"]
        call82_types -> simple_case

        simple_case_operand [label="Operand"]
        simple_case -> simple_case_operand
        call78_types [TYPES="[any]", MODS="[...]", label="TYPES: ANY -> TP2\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        simple_case_operand -> call78_types

        simple_case_condition [label="Condition"]
        call78_types -> simple_case_condition
        call79_types [TYPES="[compatible]", label="TYPES: [compatible(TP2)]\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        simple_case_condition -> call79_types
        call79_types -> case_else

        simple_case_result [label="Add result"]
        call79_types -> simple_case_result
        call80_types [TYPES="[compatible]", label="TYPES: [compatible(TP1)]\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        simple_case_result -> call80_types
        call80_types -> simple_case_condition

        searched_case [label="Searched CASE"]
        call82_types -> searched_case

        searched_case_condition [label="Condition"]
        searched_case -> searched_case_condition
        call76_types [TYPES="[3VL Value]", label="TYPES: [3VL Value]\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        searched_case_condition -> call76_types
        call76_types -> case_else

        searched_case_result [label="Add result"]
        call76_types -> searched_case_result
        call77_types [TYPES="[compatible]", label="TYPES: [compatible(TP1)]\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        searched_case_result -> call77_types
        call77_types -> searched_case_condition
    }

    subgraph def_column_spec {
        column_spec [TYPES="[numeric, integer, bigint, 3VL Value, text, date]", MODS="[group by columns]", label="column specifier\ntypes=[numeric, integer, bigint, 3VL Value, text, date]\nmods=[group by columns]", shape=rectangle, style=filled, color=gold]
        EXIT_column_spec [label="EXIT column specifier", shape=rectangle]

        column_spec_choose_source [label="Choose column source"]
        column_spec -> column_spec_choose_source

        column_spec_choose_qualified [label="Choose if qualified\n[set value]", set_value="do_unique_column_names_exist_for_selected_types"]

        get_column_spec_from_group_by [label="GROUP BY\nmod. 'group by columns' -> ON", modifier="group by columns", modifier_mode="on"]
        column_spec_choose_source -> get_column_spec_from_group_by
        get_column_spec_from_group_by -> column_spec_choose_qualified

        get_column_spec_from_from [label="FROM\nmod. 'group by columns' -> OFF", modifier="group by columns", modifier_mode="off"]
        column_spec_choose_source -> get_column_spec_from_from
        get_column_spec_from_from -> column_spec_choose_qualified

        qualified_column_name [label="Qualified (R.COL)"]
        column_spec_choose_qualified -> qualified_column_name
        qualified_column_name -> EXIT_column_spec

        unqualified_column_name [label="Unqualified (COL)\n[call mod]", call_modifier="has_unique_column_names_for_selected_types"]
        column_spec_choose_qualified -> unqualified_column_name
        unqualified_column_name -> EXIT_column_spec
    }

    subgraph def_list_expr {
        list_expr [TYPES="[numeric, integer, bigint, 3VL Value, text, date]", MODS="[]", label="list expr\ntypes=[numeric, integer, bigint, 3VL Value, text, date]\n[mods]", shape=rectangle, style=filled, color=blue]
        EXIT_list_expr[label="EXIT list expr"]

        call16_types [TYPES="[...]", MODS="[...]", label="TYPES: [...types]\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        list_expr -> call16_types

        list_expr_multiple_values [label="Multiple values"]
        call16_types -> list_expr_multiple_values

        call49_types [TYPES="[compatible]", label="TYPES: [compatible]\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        list_expr_multiple_values -> call49_types
        list_expr_multiple_values -> EXIT_list_expr
        call49_types -> call49_types

        call49_types -> EXIT_list_expr
    }

    subgraph def_GROUP_BY {
        GROUP_BY [label="GROUP BY", shape=rectangle, style=filled, color=gray]
        EXIT_GROUP_BY [label="EXIT GROUP BY"]

        group_by_single_group [label="single group\n(GROUP BY ())"]
        GROUP_BY -> group_by_single_group
        group_by_single_group -> EXIT_GROUP_BY

        has_accessible_columns [label="Has selectable columns\n[set value]", set_value="has_accessible_cols"]
        GROUP_BY -> has_accessible_columns
        grouping_column_list [label="columns list\n[call mod]", call_modifier="has_accessible_cols_mod"]
        has_accessible_columns -> grouping_column_list

        call70_types[TYPES="[any]", label="TYPES: [any]\nMODS: [no literals, no type expr, no typed nulls,\nno subquery, no aggregate, no case]", MODS="[no literals, no type expr, no typed nulls, no subquery, no aggregate, no case]", shape=rectangle, style=filled, color=lightblue]
        grouping_column_list -> call70_types
        call70_types -> grouping_column_list
        call70_types -> EXIT_GROUP_BY

        special_grouping [label="special grouping"]
        grouping_column_list -> special_grouping
        set_list [label="set list"]
        set_list_empty_allowed [label="Empty set\n[call mod]", call_modifier="empty set allowed"]
        set_list -> set_list_empty_allowed
        // set_list_empty_allowed -> set_list
        set_list_empty_allowed -> grouping_column_list
        set_list_empty_allowed -> EXIT_GROUP_BY

        grouping_rollup [label="rollup\n[set value]", set_value="is_grouping_sets"]
        special_grouping -> grouping_rollup
        grouping_rollup -> set_list

        grouping_cube [label="cube\n[set value]", set_value="is_grouping_sets"]
        special_grouping -> grouping_cube
        grouping_cube -> set_list

        grouping_set [label="grouping set\n[set value]\n(allows empty set)", set_value="is_grouping_sets"]
        special_grouping -> grouping_set
        grouping_set -> set_list

        call69_types [TYPES="[any]", label="TYPES: [any]\n MODS: [no literals, no type expr, no typed nulls,\nno subquery, no aggregate, no case]", MODS="[no literals, no type expr, no typed nulls, no subquery, no aggregate, no case]", shape=rectangle, style=filled, color=lightblue]
        set_list -> call69_types
        // call69_types -> set_list
        set_multiple [label="multiple cols in set"]
        call69_types -> set_multiple
        set_multiple -> call69_types
        set_multiple -> EXIT_GROUP_BY
        set_multiple -> grouping_column_list
    }

    subgraph def_aggregate_function {
        aggregate_function [TYPES="[bigint, integer, numeric, 3VL Value, text, date]", label="aggregate function\nTYPES=[bigint, integer, numeric, 3VL Value, text, date]", shape=rectangle, style=filled, color=peru]
        EXIT_aggregate_function [label="EXIT aggregate function"]

        aggregate_select_return_type [label="select\nreturn type"]
        aggregate_not_distinct[label="bypass\n[set value]", set_value="distinct_aggr"]
        aggregate_function -> aggregate_not_distinct
        aggregate_not_distinct -> aggregate_select_return_type
        aggregate_distinct[label="DISTINCT\n[set value]", set_value="distinct_aggr"]
        aggregate_function -> aggregate_distinct
        aggregate_distinct -> aggregate_select_return_type


        aggregate_select_type_bigint[TYPE_NAME="bigint", label="bigint?"]
        aggregate_select_return_type -> aggregate_select_type_bigint

        arg_bigint [label="[bigint]"]
        aggregate_select_type_bigint -> arg_bigint
        call75_types [TYPES="[bigint]", label="TYPES: bigint\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_bigint -> call75_types
        call75_types -> EXIT_aggregate_function

        arg_bigint_any [label="[any]"]
        aggregate_select_type_bigint -> arg_bigint_any
        call65_types [TYPES="[any]", label="TYPES: any\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_bigint_any -> call65_types
        call65_types -> EXIT_aggregate_function

        arg_star [label="COUNT(*)\n[call mod.]", call_modifier="distinct_aggr_mod"]
        aggregate_select_type_bigint -> arg_star
        arg_star -> EXIT_aggregate_function


        aggregate_select_type_integer[TYPE_NAME="integer", label="integer?"]
        aggregate_select_return_type -> aggregate_select_type_integer

        arg_integer [label="[integer]"]
        aggregate_select_type_integer -> arg_integer
        call71_types [TYPES="[integer]", label="TYPES: integer\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_integer -> call71_types
        call71_types -> EXIT_aggregate_function


        aggregate_select_type_numeric[TYPE_NAME="numeric", label="numeric?"]
        aggregate_select_return_type -> aggregate_select_type_numeric

        arg_single_numeric [label="[numeric]"]
        aggregate_select_type_numeric -> arg_single_numeric
        call66_types [TYPES="[numeric]", label="TYPES: numeric\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_single_numeric -> call66_types
        call66_types -> EXIT_aggregate_function
        
        arg_double_numeric [label="[numeric, numeric]"]
        aggregate_select_type_numeric -> arg_double_numeric   
        call68_types[TYPES="[numeric]", label="TYPES: numeric\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_double_numeric -> call68_types
        call68_types -> call66_types


        aggregate_select_type_text[TYPE_NAME="text", label="text?"]
        aggregate_select_return_type -> aggregate_select_type_text

        arg_single_text [label="[text]"]
        aggregate_select_type_text -> arg_single_text
        call63_types [TYPES="[text]", label="TYPES: text\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_single_text -> call63_types
        call63_types -> EXIT_aggregate_function
        arg_double_text [label="[text, text]"]
        call74_types [TYPES="[text]", label="TYPES: text\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        aggregate_select_type_text -> arg_double_text
        arg_double_text -> call74_types
        call74_types -> call63_types


        aggregate_select_type_bool[TYPE_NAME="3VL Value", label="3VL Value?"]
        aggregate_select_return_type -> aggregate_select_type_bool

        arg_single_3vl [label="[3vl]"]
        aggregate_select_type_bool -> arg_single_3vl
        call64_types [TYPES="[3VL Value]", label="TYPES: 3VL Value\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_single_3vl -> call64_types
        call64_types -> EXIT_aggregate_function


        aggregate_select_type_date [TYPE_NAME="date", label="date?"]
        aggregate_select_return_type -> aggregate_select_type_date

        arg_date [label="[date]"]
        aggregate_select_type_date -> arg_date
        call72_types [TYPES="[date]", label="TYPES: date\nMODS: [no aggregate]", MODS="[no aggregate]", shape=rectangle, style=filled, color=lightblue]
        arg_date -> call72_types
        call72_types -> EXIT_aggregate_function
    }

    subgraph def_HAVING {
        HAVING [label="HAVING\nmods = [group by columns]", MODS="[group by columns]", shape=rectangle, style=filled, color=mediumvioletred]
        EXIT_HAVING [label="EXIT HAVING"]

        call45_types [TYPES="[3VL Value]", MODS="[group by columns]", label="TYPE: [3VL]\nMODS: group by columns", shape=rectangle, style=filled, color=lightblue]
        HAVING -> call45_types
        call45_types -> EXIT_HAVING
    }

    # cosmetic
    subgraph ignore {
        { rank = same; "call0_Query"; "FROM_table"; }

        EXIT_FROM -> WHERE [color=none, weight=10]
        EXIT_WHERE -> SELECT [color=none, weight=10]
        EXIT_SELECT -> LIMIT [color=none, weight=10]
        EXIT_LIMIT -> GROUP_BY [color=none]
        EXIT_GROUP_BY -> HAVING [color=none]

        EXIT_VAL_3 -> number [color=none, weight=10]
        EXIT_number -> text [color=none]
        EXIT_text -> date [color=none]

        EXIT_types -> column_spec [color=none, weight=10]
        EXIT_column_spec -> list_expr[color=none]
        EXIT_list_expr -> aggregate_function [color=none]
        EXIT_aggregate_function -> case [color=none]
    }
}