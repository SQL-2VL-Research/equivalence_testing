# Structure is ALWAYS as follows:
# 1. General rule is place function definitions inside their own subgraphs.
# 2. Functional node begins from the node_name node.

# 3. Function definitions & calls look as follows:
# 1) Definitions:
# subgraph def_{node_name} {
#     {node_name} [
#         TYPES="[{type_name}, ...]" (multiple type variants can be choosen, none can be choosen)
#         MODS="[{mod_name}, ...]"
#         ...
#     ]
#     EXIT_{node_name} [label="EXIT {node_label}"]
#     ...
# }
# 2) Calls (execution will move to a root of a different subgraph):
#     call{caller_num}_{node_name} [
#         TYPES="[{type_name}, ...]" OR "[any]" OR "[known]" OR "[compatible]" OR "[...]" (passes all argument types further),
#         MODS="[{mod_name}, ...]" OR "[...]" (passes all argument triggers further),
#         ...
#     ]
#
# For types, can also use [TR...], or [RI...] for passing further only the types that correcpond to TYPE_NAME ([R...]),
# or corresponding to function name, passing the inner types ([RI...]).
#
# TYPE, TYPES and MOD in definitions are only for type-checking.
# All specified types of modifiers (TYPE, TYPES, MOD) are required to be passed by caller.
# If TYPES="[any]", all types are selected.
# If TYPES="[compatible]" or TYPES="[known]", the types are popped from the reprective stacks.
# from the respective stacks

# 4. Typed node (with a question mark at the end in definition label):
# {node_name} [TYPE_NAME="type_name"]
# TYPE_NAME is the name of a type listed in function declaration.
# The node will be turned off or on respective to the types passed to function call.

# 4.1 A node with a trigger
# {node_name} [trigger="[trig_name]", trigger_mode="on"/"off"]
# if `trigger` is present in the modifiers, turn the node on or off according to the trigger_mode.

# 4.2 A node with a call trigger
# {node_name} [call_trigger="[call_trig_name]"]
# if the function corresponding to call_trig_name returns true (handler registered in code),
# the node is on. Otherwise, it is off.

# 5. Exit a callable node:
# EXIT_{node_name} [label="EXIT {node_label}"]

# 6. Call a callable node with params:
# call{caller_num}_{node_name} [TYPES={...}, MODS={...}, ...]
# ... -> call...
# there can be multiple callers, so each caller should have a unique id
# values of TYPES and MOD are exact mathes to those in definition

# 7. Call a callable node without params:
# call{caller_num}_{node_name} [...]
# ... -> call...

# 8. These are ignored:
# 1) ... -> ... [color=none]
# 2) Graphviz params in [] (label, shape...)

# 9. Define a node before referencing it:
# FROM []
# Query -> FROM

# 10. Don't do this:
# ... -> ... -> ...

# 11. subgraph ignore {} is completely ignored

# 12. Do NOT use block comments /* */

# 13 [temporary]. Mark nodes that will generate a literal value with 100%
# probability as node[literal="t"]

# 14. To use modifiers provided in arguments, mark a node with trigger="MOD. NAME", trigger_mode="off" / trigger_mode="on"

digraph G {
    subgraph def_Query {
        Query [TYPES="[numeric, 3VL Value, array, list expr, string]", MODS="[single value]", label="Query\ntypes=[numeric, 3VL Value, array, list expr, string]\nmods=[single value]", shape=octagon, style=filled, color=green]
        EXIT_Query [label="EXIT Query"]

        FROM []

        single_value_true [label="limit 1 (mod.: 'single value')", trigger="single value", trigger_mode="on"]
        Query -> single_value_true
        single_value_true -> FROM

        single_value_false [label="mod.: '!single value'", trigger="single value", trigger_mode="off"]
        Query -> single_value_false
        single_value_false -> FROM

        limit [label="limit [num]"]
        single_value_false -> limit
        call52_types [TYPES="[numeric]", MODS="[no column spec]", label="TYPES: numeric\nmodif: [no column spec]", shape=rectangle, style=filled, color=lightblue]
        limit -> call52_types
        call52_types -> FROM

        FROM_multiple_relations [label="multiple relations"]

        Table []
        FROM -> Table
        Table -> FROM_multiple_relations
        FROM_multiple_relations -> Table

        // call0_Query [label="Query", shape=rectangle, TYPES="[any]", MODS="[]", style=filled, color=green]
        // FROM -> call0_Query
        // call0_Query -> FROM_multiple_relations
        // FROM_multiple_relations -> call0_Query

        EXIT_FROM [label="EXIT FROM"]
        FROM_multiple_relations -> EXIT_FROM

        WHERE [label="WHERE"]
        EXIT_FROM -> WHERE

        call53_types [TYPES="[3VL Value]", label="TYPES: 3VL Value", shape=rectangle, style=filled, color=lightblue]
        WHERE -> call53_types

        SELECT []
        EXIT_WHERE [label="EXIT WHERE"]
        call53_types -> EXIT_WHERE
        EXIT_FROM -> EXIT_WHERE

        SELECT []
        EXIT_SELECT [label="EXIT SELECT"]

        EXIT_WHERE -> SELECT

        // call0_group_by [label="GROUP BY Statement", TYPES="[known]", shape=rectangle, style=filled, color=gray]
        // EXIT_WHERE -> call0_group_by
        // call0_group_by -> SELECT

        SELECT_DISTINCT [label="DISTINCT"]
        // SELECT_PERCENT [label="PERCENT"]
        // SELECT_TOP [label="TOP"]
        // call43_types [TYPES="[numeric]", label="TYPES: numeric", shape=rectangle, style=filled, color=lightblue]
        // SELECT_WITH_TIES [label="WITH TIES"]
        SELECT_distinct_end [label=";"]
        // SELECT_percent_end [label=";"]

        SELECT -> SELECT_DISTINCT
        SELECT_DISTINCT -> SELECT_distinct_end
        SELECT -> SELECT_distinct_end
        // SELECT_distinct_end -> SELECT_TOP
        // SELECT_TOP -> call43_types
        // call43_types -> SELECT_PERCENT
        // SELECT_PERCENT -> SELECT_percent_end
        // call43_types -> SELECT_percent_end
        // SELECT_percent_end -> SELECT_WITH_TIES

        SELECT_projection [label="SELECT projection"]
        // SELECT_WITH_TIES -> SELECT_projection
        SELECT_distinct_end -> SELECT_projection
        // SELECT_percent_end -> SELECT_projection

        SELECT_list [label="SELECT list"]
        // SELECT_wildcard[label="*"]
        // SELECT_qualified_wildcard[label="qualified wildcard"]
        SELECT_unnamed_expr[label="unnamed expression"]
        SELECT_expr_with_alias[label="expression with alias"]
        SELECT_list_multiple_values[label="SELECT list multiple values"]

        SELECT_projection -> SELECT_list
        // SELECT_list -> SELECT_wildcard
        // SELECT_list -> SELECT_qualified_wildcard
        SELECT_list -> SELECT_unnamed_expr
        SELECT_list -> SELECT_expr_with_alias
        call54_types [label="TYPES: [...types]", TYPES="[...]", shape=rectangle, style=filled, color=lightblue]
        SELECT_unnamed_expr -> call54_types
        SELECT_expr_with_alias -> call54_types

        // call0_aggregate_function [label="aggregate function*", TYPES="[known]", shape=rectangle, style=filled, color=peru]
        // SELECT_wildcard -> EXIT_SELECT  // SELECT_list_multiple_values // call0_aggregate_function
        // SELECT_qualified_wildcard -> SELECT_list_multiple_values // call0_aggregate_function
        // call0_aggregate_function -> SELECT_list_multiple_values
        call54_types -> SELECT_list_multiple_values // call0_aggregate_function
        SELECT_list_multiple_values -> EXIT_SELECT
        SELECT_list_multiple_values_single_value_false [label="mod. single value = false", trigger="single value", trigger_mode="off"]
        SELECT_list_multiple_values -> SELECT_list_multiple_values_single_value_false
        SELECT_list_multiple_values_single_value_false -> SELECT_list

        // call0_having [label="HAVING", TYPES="[known]", MODS="[]", shape=rectangle, style=filled, color=mediumvioletred]
        // EXIT_SELECT -> call0_having
        // call0_having -> EXIT_Query
        
        EXIT_SELECT -> EXIT_Query
    }

    subgraph def_VAL_3 {
        VAL_3 [shape=rectangle, label="3VL Value\nmods: [no column spec]", MODS="[no column spec]", style=filled, color=red]
        EXIT_VAL_3 [shape=rectangle, label="EXIT 3VL Value"]

        IsNull [label="IS NULL"]
        call0_types_all [label="TYPES: ALL\nmodif.: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=orange]
        VAL_3 -> IsNull
        IsNull -> call0_types_all
        IsNull_not [label="NOT"]
        IsNull -> IsNull_not
        IsNull_not -> call0_types_all
        call0_types_all -> EXIT_VAL_3

        IsDistinctFrom [label="IS DISTINCT FROM"]
        call1_types_all [label="TYPES: ALL\nmodif.: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=orange]
        IsDistinctNOT [label="NOT"]
        DISTINCT []
        call21_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        VAL_3 -> IsDistinctFrom
        IsDistinctFrom -> call1_types_all
        call1_types_all -> IsDistinctNOT
        IsDistinctNOT -> DISTINCT
        call1_types_all -> DISTINCT
        DISTINCT -> call21_types
        call21_types -> EXIT_VAL_3

        Exists_not [label="NOT"]
        Exists [label="EXISTS"]
        call2_Query [TYPES="[any]", MODS="[]", label="Query", shape=rectangle, style=filled, color=green]
        VAL_3 -> Exists
        Exists -> call2_Query
        call2_Query -> EXIT_VAL_3
        Exists -> Exists_not
        Exists_not -> call2_Query

        InList[label="IN [list expr]"]
        InListNot [label="NOT"]
        InListIn [label="IN"]
        VAL_3 -> InList
        call2_types_all [label="TYPES: ALL\nmodif.: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=orange]
        InList -> call2_types_all
        call2_types_all -> InListNot
        InListNot -> InListIn
        call2_types_all -> InListIn
        call1_list_expr [TYPES="[compatible]", MODS="[...]", label="list expr\nTYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=blue]
        InListIn -> call1_list_expr
        call1_list_expr -> EXIT_VAL_3

        InSubquery[label="IN [subquery]"]
        InSubqueryNot [label="NOT"]
        InSubqueryIn [label="IN"]
        call3_types_all [label="TYPES: ALL\nmodif.: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=orange]
        VAL_3 -> InSubquery
        InSubquery -> call3_types_all
        call3_types_all -> InSubqueryNot
        InSubqueryNot -> InSubqueryIn
        call3_types_all -> InSubqueryIn
        call3_Query [TYPES="[compatible]", MODS="[]", label="Query\nTYPE: [compatible]", shape=rectangle, style=filled, color=green]
        InSubqueryIn -> call3_Query
        call3_Query -> EXIT_VAL_3

        Between[label="BETWEEN . AND ."]
        BetweenBetween [label="BETWEEN"]
        BetweenBetweenAnd [label="AND"]
        VAL_3 -> Between
        call4_types_all [label="TYPES: ALL\nmodif.: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=orange]
        Between -> call4_types_all
        call4_types_all -> BetweenBetween
        call22_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BetweenBetween -> call22_types
        call22_types -> BetweenBetweenAnd
        call23_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BetweenBetweenAnd -> call23_types
        call23_types -> EXIT_VAL_3

        BinaryComp[label="CMP"]
        BinaryCompLess [label="<"]
        BinaryCompEqual [label="="]
        BinaryCompLessEqual [label="<="]
        BinaryCompUnEqual [label="<>"]
        VAL_3 -> BinaryComp
        call5_types_all [label="TYPES: ALL\nmodif.: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=orange]
        BinaryComp -> call5_types_all
        call24_types [MODS="[...]", TYPES="[compatible]", label="TYPES: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        call5_types_all -> BinaryCompLess
        BinaryCompLess -> call24_types
        call5_types_all -> BinaryCompEqual
        BinaryCompEqual -> call24_types
        call5_types_all -> BinaryCompLessEqual
        BinaryCompLessEqual -> call24_types
        call5_types_all -> BinaryCompUnEqual
        BinaryCompUnEqual -> call24_types
        call24_types -> EXIT_VAL_3

        AnyAll[label="ANY / ALL"]
        AnyAllSelectOp[label="select op."]
        AnyAllLess [label="<"]
        AnyAllEqual [label="="]
        AnyAllLessEqual [label="<="]
        AnyAllUnEqual [label="<>"]
        AnyAllSelectIter[label="select iterable"]
        AnyAllAnyAll[label="select ANY/ALL"]
        AnyAllAnyAllAny[label="ANY"]
        AnyAllAnyAllAll[label="ALL"]
        VAL_3 -> AnyAll
        call6_types_all [label="TYPES: ALL\nmodif.: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=orange]
        AnyAll -> call6_types_all
        call6_types_all -> AnyAllSelectOp
        AnyAllSelectOp -> AnyAllLess
        AnyAllLess -> AnyAllSelectIter
        AnyAllSelectOp -> AnyAllEqual
        AnyAllEqual -> AnyAllSelectIter
        AnyAllSelectOp -> AnyAllLessEqual
        AnyAllLessEqual -> AnyAllSelectIter
        AnyAllSelectOp -> AnyAllUnEqual
        AnyAllUnEqual -> AnyAllSelectIter
        call4_Query [TYPES="[compatible]", label="Query\nTYPE: [compatible]", shape=rectangle, style=filled, color=green]
        AnyAllSelectIter -> call4_Query
        call4_Query -> AnyAllAnyAll
        call1_array [TYPES="[compatible]", MODS="[...]", label="array\nTYPE: [compatible]\nmodif.: [...mods]", shape=rectangle, style=filled, color=yellow]
        AnyAllSelectIter -> call1_array
        call1_array -> AnyAllAnyAll
        AnyAllAnyAll -> AnyAllAnyAllAny
        AnyAllAnyAllAny -> EXIT_VAL_3
        AnyAllAnyAll -> AnyAllAnyAllAll
        AnyAllAnyAllAll -> EXIT_VAL_3

        BinaryStringLike[label="LIKE"]
        BinaryStringLikeNot [label="NOT"]
        BinaryStringLikeIn [label="LIKE"]
        VAL_3 -> BinaryStringLike
        call25_types [MODS="[...]", TYPES="[string]", label="TYPES: string\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryStringLike -> call25_types
        call25_types -> BinaryStringLikeNot
        BinaryStringLikeNot -> BinaryStringLikeIn
        call25_types -> BinaryStringLikeIn
        call26_types [MODS="[...]", TYPES="[string]", label="TYPES: string\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryStringLikeIn -> call26_types
        call26_types -> EXIT_VAL_3

        BinaryBooleanOpV3[label="bool op."]
        BinaryBooleanOpV3AND [label="AND"]
        BinaryBooleanOpV3OR [label="OR"]
        BinaryBooleanOpV3XOR [label="XOR"]
        VAL_3 -> BinaryBooleanOpV3
        call27_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryBooleanOpV3 -> call27_types
        call27_types -> BinaryBooleanOpV3AND
        call28_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryBooleanOpV3AND -> call28_types
        call27_types -> BinaryBooleanOpV3OR
        BinaryBooleanOpV3OR -> call28_types
        call27_types -> BinaryBooleanOpV3XOR
        BinaryBooleanOpV3XOR -> call28_types
        call28_types -> EXIT_VAL_3

        true [literal="t"]
        VAL_3 -> true
        true -> EXIT_VAL_3
        false [literal="t"]
        VAL_3 -> false
        false -> EXIT_VAL_3

        Nested_VAL_3[label="([expr])"]
        VAL_3 -> Nested_VAL_3
        call29_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        Nested_VAL_3 -> call29_types
        call29_types -> EXIT_VAL_3

        UnaryNot_VAL_3[label="NOT"]
        call30_types [MODS="[...]", TYPES="[3VL Value]", label="TYPES: 3VL Value\nmodif.: [...mods]", shape=rectangle, style=filled, color=lightblue]
        VAL_3 -> UnaryNot_VAL_3
        UnaryNot_VAL_3 -> call30_types
        call30_types -> EXIT_VAL_3
    }

    subgraph def_numeric {
        numeric [shape=rectangle, label="numeric\nmods: [no column spec]", MODS="[no column spec]", style=filled, color=chocolate]
        EXIT_numeric [label="EXIT numeric"]

        numeric_literal[label="literal", literal="t"]
        numeric -> numeric_literal
        numeric_literal_int[label="random int", literal="t"]
        numeric_literal -> numeric_literal_int
        numeric_literal_int -> EXIT_numeric
        numeric_literal_float[label="random float", literal="t"]
        numeric_literal -> numeric_literal_float
        numeric_literal_float -> EXIT_numeric

        BinaryNumericOp[label="binary op."]
        call47_types [TYPES="[numeric]", MODS="[...]", label="TYPES: numeric\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        numeric -> BinaryNumericOp
        call48_types [TYPES="[numeric]", MODS="[...]", label="TYPES: numeric\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        BinaryNumericOp -> call48_types
        binary_numeric_plus [label="+"]
        call48_types -> binary_numeric_plus
        binary_numeric_plus -> call47_types
        binary_numeric_minus [label="-"]
        call48_types -> binary_numeric_minus
        binary_numeric_minus -> call47_types
        binary_numeric_mul [label="*"]
        call48_types -> binary_numeric_mul
        binary_numeric_mul -> call47_types
        binary_numeric_div [label="/"]
        call48_types -> binary_numeric_div
        binary_numeric_div -> call47_types
        binary_numeric_bin_or [label="|"]
        call48_types -> binary_numeric_bin_or
        binary_numeric_bin_or -> call47_types
        binary_numeric_bin_and [label="&"]
        call48_types -> binary_numeric_bin_and
        binary_numeric_bin_and -> call47_types
        binary_numeric_bin_xor [label="^"]
        call48_types -> binary_numeric_bin_xor
        binary_numeric_bin_xor -> call47_types
        call47_types -> EXIT_numeric

        UnaryNumericOp [label="unary op."]
        call1_types [TYPES="[numeric]", MODS="[...]", label="TYPES: numeric\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        numeric -> UnaryNumericOp
        unary_numeric_plus[label="+"]
        UnaryNumericOp -> unary_numeric_plus
        unary_numeric_plus -> call1_types
        unary_numeric_minus[label="-"]
        UnaryNumericOp -> unary_numeric_minus
        unary_numeric_minus -> call1_types
        unary_numeric_bin_not [label="~"]
        UnaryNumericOp -> unary_numeric_bin_not
        unary_numeric_bin_not -> call1_types
        unary_numeric_sq_root [label="|/"]
        UnaryNumericOp -> unary_numeric_sq_root
        unary_numeric_sq_root -> call1_types
        unary_numeric_cub_root [label="||/"]
        UnaryNumericOp -> unary_numeric_cub_root
        unary_numeric_cub_root -> call1_types
        // unary_numeric_postfix_fact [label="!"]         // THESE 2 WERE REMOVED FROM POSTGRESQL
        // UnaryNumericOp -> unary_numeric_postfix_fact
        // unary_numeric_postfix_fact -> call1_types
        // unary_numeric_prefix_fact [label="!!"]
        // UnaryNumericOp -> unary_numeric_prefix_fact
        // unary_numeric_prefix_fact -> call1_types
        unary_numeric_abs [label="@"]
        UnaryNumericOp -> unary_numeric_abs
        unary_numeric_abs -> call1_types
        call1_types -> EXIT_numeric

        numeric_string_Position[label="POSITION([expr] in [expr])"]
        numeric -> numeric_string_Position
        call2_types [TYPES="[string]", MODS="[...]", label="TYPES: string\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        numeric_string_Position -> call2_types
        string_position_in [label="in"]
        call2_types -> string_position_in
        call3_types [TYPES="[string]", MODS="[...]", label="TYPES: string\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        string_position_in -> call3_types
        call3_types -> EXIT_numeric

        Nested_numeric[label="([expr])"]
        numeric -> Nested_numeric
        call4_types [TYPES="[numeric]", MODS="[...]", label="TYPES: numeric\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        Nested_numeric -> call4_types
        call4_types -> EXIT_numeric
    }

    subgraph def_string {
        string [label="string\nmods: [no column spec]", MODS="[no column spec]", shape=rectangle, style=filled, color=pink]
        EXIT_string [label="EXIT string"]

        string_literal [label="random string literal", literal="t"]
        string -> string_literal
        string_literal -> EXIT_string

        string_trim[label="TRIM"]
        string -> string_trim
        call5_types [TYPES="[string]", MODS="[...]", label="TYPES: string\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        string_trim -> call5_types
        call6_types [TYPES="[string]", MODS="[...]", label="TYPES: string\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        string_trim -> call6_types
        BOTH []
        call6_types -> BOTH
        BOTH -> call5_types
        LEADING []
        call6_types -> LEADING
        LEADING -> call5_types
        TRAILING []
        call6_types -> TRAILING
        TRAILING -> call5_types
        call5_types -> EXIT_string

        string_concat [label="concatenation"]
        string -> string_concat
        call7_types [TYPES="[string]", MODS="[...]", label="TYPES: string\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        string_concat -> call7_types
        string_concat_concat [label="||"]
        call7_types -> string_concat_concat
        call8_types [TYPES="[string]", MODS="[...]", label="TYPES: string\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        string_concat_concat -> call8_types
        call8_types -> EXIT_string

        // string_substring[label="substring"]
        // string -> string_substring
        // call9_types [TYPES="[string]", MODS="[...]", label="TYPES: string\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        // string_substring -> call9_types
        // string_substr_numeric_from_from[label="from"]
        // call9_types -> string_substr_numeric_from_from
        // call10_types [TYPES="[numeric]", MODS="[...]", label="TYPES: numeric\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        // string_substr_numeric_from_from -> call10_types
        // call10_types -> EXIT_string
        // string_substr_numeric_len_len [label="length"]
        // call10_types -> string_substr_numeric_len_len
        // call11_types [TYPES="[numeric]", MODS="[...]", label="TYPES: numeric\nMODS: [...mods]", shape=rectangle, style=filled, color=lightblue]
        // string_substr_numeric_len_len -> call11_types
        // call11_types -> EXIT_string
    }
    
    subgraph def_types {
        types [TYPES="[numeric, 3VL Value, array, list expr, string]", MODS="[no column spec]", label="TYPE(S) (generic):\ntypes=[numeric?, 3VL Value?, array?, list expr?, string?]\nmods=[no column spec]", shape=octagon, style=filled, color=lightblue]
        EXIT_types [label="EXIT GENERIC TYPE(S)", shape=rectangle]

        types_select_type_noexpr[label="Non-expression"]
        types_select_type_numeric[TYPE_NAME="numeric", label="numeric?", affects_call_trigger="is_column_type_available"]
        types -> types_select_type_numeric
        types_select_type_numeric -> types_select_type_noexpr
        types_select_type_3vl[TYPE_NAME="3VL Value", label="3VL Value?", affects_call_trigger="is_column_type_available"]
        types -> types_select_type_3vl
        types_select_type_3vl -> types_select_type_noexpr
        types_select_type_array[TYPE_NAME="array", label="array?", affects_call_trigger="is_column_type_available"]
        types -> types_select_type_array
        types_select_type_array -> types_select_type_noexpr
        types_select_type_list_expr[TYPE_NAME="list expr", label="list expr?", affects_call_trigger="is_column_type_available"]
        types -> types_select_type_list_expr
        types_select_type_list_expr -> types_select_type_noexpr
        types_select_type_string[TYPE_NAME="string", label="string?", affects_call_trigger="is_column_type_available"]
        types -> types_select_type_string
        types_select_type_string -> types_select_type_noexpr

        call0_column_spec [TYPES="[known]", call_trigger="is_column_type_available", trigger="no column spec", trigger_mode="off", label="column specifier\nTYPE: type\nmod.: 'no column spec'\ncall.trig.: 'is_column_type_available'", shape=rectangle, style=filled, color=gold]
        types_select_type_noexpr -> call0_column_spec
        call0_column_spec -> EXIT_types

        call1_Query [TYPES="[known]", MODS="[single value]", label="Query\nMODS: single value\nTYPE: type", shape=rectangle, style=filled, color=green]
        types_select_type_noexpr -> call1_Query
        call1_Query -> EXIT_types

        // types_null [label="null"]
        // types -> types_null
        // types_null -> EXIT_types

        call0_numeric [label="numeric\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=chocolate]
        types_select_type_numeric -> call0_numeric
        call0_numeric -> EXIT_types

        call1_VAL_3 [label="3VL Value\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=red]
        types_select_type_3vl -> call1_VAL_3
        call1_VAL_3 -> EXIT_types

        call0_string [label="string\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=pink]
        types_select_type_string -> call0_string
        call0_string -> EXIT_types

        call0_list_expr [TYPES="[RI...]", MODS="[...]", label="list expr\nTYPES: [(rel, inner)...]\nMODS: [...mods]", shape=rectangle, style=filled, color=blue]
        types_select_type_list_expr -> call0_list_expr
        call0_list_expr -> EXIT_types

        call0_array [TYPES="[RI...]", MODS="[...]", label="array\nTYPES: [(rel, inner)...]\nMODS: [...mods]", shape=rectangle, style=filled, color=yellow]
        types_select_type_array -> call0_array
        call0_array -> EXIT_types
    }

    subgraph def_types_all {
        types_all [label="TYPES: ALL\nmods: [no column spec]", MODS="[no column spec]", shape=rectangle, style=filled, color=orange]
        EXIT_types_all [label="EXIT TYPES: ALL", shape=rectangle]

        call0_types [TYPES="[numeric, 3VL Value, array, list expr, string]", MODS="[...]", label="TYPES: numeric, 3VL Value, array, list expr, string\nMODS: [...mods]", shape=rectangle]
        types_all -> call0_types
        call0_types -> EXIT_types_all
    }

    subgraph def_column_spec {
        column_spec [TYPES="[numeric, 3VL Value, string, array, list expr]", label="column specifier\ntypes=[numeric, 3VL Value, string, array, list expr]", shape=octagon, style=filled, color=gold]
        EXIT_column_spec [label="EXIT column specifier", shape=rectangle]

        typed_column_name [label="Unqualified/Qualified column name of type: type"]
        column_spec -> typed_column_name
        typed_column_name -> EXIT_column_spec
    }

    subgraph def_array {
        array [TYPES="[numeric, 3VL Value, string, list expr, array]", MODS="[no column spec]", label="array\ntypes=[numeric?, 3VL Value?, string?, array?]\nmods: [no column spec]", shape=octagon, style=filled, color=yellow]
        EXIT_array[label="EXIT array"]

        array_one_more_value_is_allowed [label="One more value (if allowed)\ncall. trig.: 'can_extend_array'", call_trigger="can_extend_array"]
        array_exit_allowed [label="Exit is allowed\ncall. trig.: 'can_extend_array'", call_trigger="can_extend_array"]
        array_multiple_values [label="Multiple values\naffects: 'can_extend_array'", affects_call_trigger="can_extend_array"]
        array_multiple_values -> array_one_more_value_is_allowed
        array_multiple_values -> array_exit_allowed

        call50_types [TYPES="[compatible]", label="TYPES: [compatible]\nMODS: [...mods]\naffects: 'can_extend_array'", affects_call_trigger="can_extend_array", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        call50_types -> array_one_more_value_is_allowed
        array_one_more_value_is_allowed -> call50_types

        call12_types [TYPE_NAME="numeric", TYPES="[numeric]", label="TYPE: numeric?\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        array -> call12_types
        call12_types -> array_multiple_values

        call13_types [TYPE_NAME="3VL Value", TYPES="[3VL Value]", label="TYPE: 3VL Value?\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        array -> call13_types
        call13_types -> array_multiple_values

        call31_types [TYPE_NAME="string", TYPES="[string]", label="TYPE: string?\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        array -> call31_types
        call31_types -> array_multiple_values

        call51_types [TYPE_NAME="list expr", TYPES="[TR...]", label="TYPE: list expr?\nMODS: [...mods]\nTYPES: [(rel)...]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        array -> call51_types
        call51_types -> array_multiple_values

        call14_types [TYPE_NAME="array", TYPES="[TR...]", label="TYPE: array?\nMODS: [...mods]\nTYPES: [(rel)...]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        array -> call14_types
        call14_types -> array_multiple_values

        call50_types -> array_exit_allowed
        array_exit_allowed -> EXIT_array
    }

    subgraph def_list_expr {
        list_expr [TYPES="[numeric, 3VL Value, string, list expr, array]", MODS="[no column spec]", label="list expr\ntypes=[numeric?, 3VL Value?, string?, list expr?, array?]\nmods: [no column spec]", shape=octagon, style=filled, color=blue]
        EXIT_list_expr[label="EXIT list expr"]

        list_expr_multiple_values [label="Multiple values"]
        call49_types [TYPES="[compatible]", label="TYPES: [compatible]\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]

        call16_types [TYPE_NAME="numeric", TYPES="[numeric]", label="TYPE: numeric?\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        list_expr -> call16_types
        call16_types -> list_expr_multiple_values

        call17_types [TYPE_NAME="3VL Value", TYPES="[3VL Value]", label="TYPE: 3VL Value?\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        list_expr -> call17_types
        call17_types -> list_expr_multiple_values

        call18_types [TYPE_NAME="string", TYPES="[string]", label="TYPE: string?\nMODS: [...mods]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        list_expr -> call18_types
        call18_types -> list_expr_multiple_values

        call19_types [TYPE_NAME="list expr", TYPES="[TR...]", label="TYPE: list expr?\nMODS: [...mods]\nTYPES=[(rel)...]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        list_expr -> call19_types
        call19_types -> list_expr_multiple_values

        call20_types [TYPE_NAME="array", TYPES="[TR...]", label="TYPE: array?\nMODS: [...mods]\nTYPES=[(rel)...]", MODS="[...]", shape=rectangle, style=filled, color=lightblue]
        list_expr -> call20_types
        call20_types -> list_expr_multiple_values

        list_expr_multiple_values -> call49_types
        // list_expr_multiple_values -> EXIT_list_expr
        call49_types -> call49_types
        call49_types -> EXIT_list_expr
    }

    subgraph def_group_by {
        group_by [label="GROUP BY", shape=rectangle, style=filled, color=gray]
        EXIT_group_by [label="EXIT GROUP BY"]

        grouping_rollup [label="rollup"]
        group_by -> grouping_rollup

        grouping_cube [label="cube"]
        group_by -> grouping_cube

        grouping_set [label="grouping set"]
        group_by -> grouping_set

        //columns must appear in FROM, but not necesserily in SELECT
        group_by_col_list [label="array of column names\nTYPES: STRING", TYPES="string", shape=rectangle]
        group_by -> group_by_col_list

        grouping_set -> group_by_col_list
        grouping_set -> grouping_cube
        grouping_set -> grouping_rollup

        grouping_rollup -> group_by_col_list
        grouping_cube -> group_by_col_list

        column_name [label="column name"]
        group_by_col_list -> column_name
        column_name -> group_by_col_list

        column_name -> EXIT_group_by
    }

    subgraph def_aggregate_function {
        aggregate_function [label="aggregate function", shape=octagon, style=filled, color=peru]
        EXIT_aggregate_function [label="EXIT aggregate function"]
        
        EXIT_fun_choice [label=";"]

        aggr_distinct [label="DISTINCT"]
        aggr_distinct -> EXIT_aggregate_function

        EXIT_fun_choice -> EXIT_aggregate_function
        EXIT_fun_choice -> aggr_distinct

        AVG[label="AVG\nTYPE: [numeric]", TYPES="[numeric]"]
        call32_types [TYPES="[compatible]", label="TYPES: [compatible]", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> AVG
        AVG -> call32_types
        call32_types -> EXIT_fun_choice
        AVG -> EXIT_fun_choice

        CHECKSUM_AGG[label="CHECKSUM_AGG\nTYPE: [numeric]", TYPES="[numeric]"]
        call33_types [TYPES="[compatible]", label="TYPES: [compatible]", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> CHECKSUM_AGG
        CHECKSUM_AGG -> call33_types
        call33_types -> EXIT_fun_choice

        COUNT[label="COUNT\nTYPE: [numeric]", TYPES="[numeric]"]
        call34_types [TYPES="[any]", label="TYPES: ANY", shape=rectangle, style=filled, color=lightblue]
        COUNT_wildcard [label="wildcard"]
        aggregate_function -> COUNT
        COUNT -> call34_types
        COUNT -> COUNT_wildcard
        COUNT_wildcard -> EXIT_fun_choice
        call34_types -> EXIT_fun_choice

        COUNT_BIG[label="COUNT_BIG\nTYPE: [numeric]", TYPES="[numeric]"]
        call35_types [TYPES="[any]", label="TYPES: ANY", shape=rectangle, style=filled, color=lightblue]
        COUNT_BIG_wildcard [label="wildcard"]
        aggregate_function -> COUNT_BIG
        COUNT_BIG -> call35_types
        COUNT_BIG -> COUNT_BIG_wildcard
        COUNT_BIG_wildcard -> EXIT_fun_choice
        call35_types -> EXIT_fun_choice

        MAX[label="MAX\nTYPES: SAME", TYPES="SAME"]
        call36_types [TYPES="[any]", label="TYPES: ANY", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> MAX
        MAX -> call36_types
        call36_types -> EXIT_fun_choice

        MIN[label="MIN\nTYPE: SAME", TYPES="SAME"]
        call37_types [TYPES="[any]", label="TYPES: ANY", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> MIN
        MIN -> call37_types
        call37_types -> EXIT_fun_choice

        STDDEV[label="STDDEV\nTYPE: [float]", TYPES="[float]"]
        call38_types [TYPES="[numeric]", label="TYPES: numeric", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> STDDEV
        STDDEV -> call38_types
        call38_types -> EXIT_fun_choice

        STDEVP[label="STDEVP\nTYPE: [float]", TYPES="[float]"]
        call39_types [TYPES="[compatible]", label="TYPES: [compatible]", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> STDEVP
        STDEVP -> call39_types
        call39_types -> EXIT_fun_choice

        STRING_AGG[label="STRING_AGG\nTYPE: [string]", TYPES="[string]"]
        call40_types [TYPES="[any]", label="TYPES: ANY", shape=rectangle, style=filled, color=lightblue]
        STRING_AGG_arg [label="argument"]
        separator [label="separator\nTYPES: [string]",TYPES="[string]"]
        STRING_AGG -> separator
        separator -> STRING_AGG_arg
        aggregate_function -> STRING_AGG
        STRING_AGG_arg -> call40_types
        call40_types -> EXIT_fun_choice

        SUM[label="SUM\nTYPE: [numeric]", TYPES="[numeric]"]
        call41_types [TYPES="[compatible]", label="TYPES: [compatible]", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> SUM
        SUM -> call41_types
        call41_types -> EXIT_fun_choice

        VAR[label="VAR\nTYPE: [float]", TYPES="[float]"]
        call42_types [TYPES="[compatible]", label="TYPES: [compatible]", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> VAR
        VAR -> call42_types
        call42_types -> EXIT_fun_choice


        VARP[label="VARP\nTYPE: [float]", TYPES="[float]"]
        call44_types [TYPES="[compatible]", label="TYPES: [compatible]", shape=rectangle, style=filled, color=lightblue]
        aggregate_function -> VARP
        VARP -> call44_types
        call44_types -> EXIT_fun_choice
    }

    subgraph def_having {
        having [label="HAVING", shape=rectangle, style=filled, color=mediumvioletred]
        EXIT_having [label="EXIT HAVING"]

        having_condition [label="HAVING condition"]
        having -> having_condition

        having_not [label="NOT"]
        call45_types [TYPES="[3VL Value]", label="TYPE: [3VL]", shape=rectangle, style=filled, color=lightblue]
        call46_types [TYPES="[3VL Value]", label="TYPE: [3VL]", shape=rectangle, style=filled, color=lightblue]
        having_logical_expr [label="AND | OR ?"]

        having_condition -> having_not
        having_condition -> call45_types

        call45_types -> having_logical_expr
        having_not -> call45_types

        having_not_optional [label="NOT"]
        having_logical_expr -> having_not_optional
        having_not_optional -> call46_types
        having_logical_expr -> call46_types

        call45_types -> EXIT_having
        call46_types -> EXIT_having
    }

    subgraph ignore {
        EXIT_VAL_3 -> numeric [color=none]
        EXIT_numeric -> string [color=none]
        EXIT_types -> types_all [color=none]
        EXIT_types_all -> column_spec [color=none]
        EXIT_column_spec -> array [color=none]
        EXIT_array -> list_expr[color=none]
        EXIT_Query -> group_by [color=none]
        EXIT_aggregate_function -> having [color=none]
    }
}